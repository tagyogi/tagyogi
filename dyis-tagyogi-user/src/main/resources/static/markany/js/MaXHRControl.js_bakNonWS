var maFunType = "";
var maCallBackFun;
var maResJsonData = new Object();
var maOnlyInstallFlag = false;
var maBrokerCommand = "";
var maStrError;
var maRepeatCheckflag = false;
var maTimeOutCheck_s = 2;
var maBrokerAddOptJson = new Object();
maBrokerAddOptJson.getVersion = new Object();
maBrokerAddOptJson.getVersion.addDot = 1;
				                
/////////////////////////////////////////////////DEBUG_FUNCTION
function addZero(x, n) {
	while (x.toString().length < n) { 
		x = "0" + x;
	}
	return x;
}
/**
 * 20170906_hcchoi<br>
 * 스크립트 디버그 메소드 console.log()함수 활용<br>
 * ex) use >>>> debugLog("open End Time", currentTime);<br>
 * ex) print >>>> ## |15:31:20| checkSocket () :: Start Time = [864]
 * 
 * @param valueName
 *            {String} 변수명
 * @param value
 *            {any} 변수값
 * @param caller
 *            {String} 호출함수명(자동)
 */
function MDBG(valueName, value, caller) {

	var callerFun = arguments.callee.caller;
	if (caller){
		callerFun = callerFun.caller;
	}
	var pat = /^function\s+([a-zA-Z0-9_]+)\s*\(/i;
	pat.exec(callerFun);
	var func = new Object();
	func.name = RegExp.$1;

	var d = new Date();
	var h = addZero(d.getHours(), 2);
	var m = addZero(d.getMinutes(), 2);
	var s = addZero(d.getSeconds(), 2);
	var ms = addZero(d.getMilliseconds(), 3);
	var currentTime = h + ":" + m + ":" + s /* + ":" + ms */;

	var funNameArr = [];
	var maxFunNameLength = 20;
	var blankCount = maxFunNameLength - func.name.length;

	for (var funnamei = 0; funnamei < func.name.length; funnamei++) {
		funNameArr.push(func.name.charAt(funnamei));
	}
	for (var maxFunName = 0; maxFunName < blankCount; maxFunName++) {
		funNameArr.push(" ");
	}

	var callFunName = funNameArr.join('');

	var valueNameArr = [];
	var maxValueNameLength = 25;
	blankCount = maxValueNameLength - valueName.length;

	for (var valuenamei = 0; valuenamei < valueName.length; valuenamei++) {
		valueNameArr.push(valueName.charAt(valuenamei));
	}
	for (var maxValuenamei = 0; maxValuenamei < blankCount; maxValuenamei++) {
		valueNameArr.push(" ");
	}

	var valueName1 = valueNameArr.join("");
	var valueName2 = "## |" + currentTime + "| " + callFunName + "() :: " + valueName1;
	
	if(window.console == undefined) 
		console = {log:function(){}};
	
	console.log( valueName2, value );
	//alert("|" + currentTime + "| " + func.name + "() :: " + valueName + " = [" + value + "]");
	
	
	/*
	var maLog = document.getElementById("maLogger");
	if( maLog == null){
		$( "body" ).append( "<textarea id='maLogger'></textarea>" );
	}
	$("#maLogger").css({
		"zIndex" : 99999,
		"position": "absolute",
		"width": "80%",
		"height": "40%"
	});
	$(maLog).text( $(maLog).text() + "|" + currentTime + "| " + func.name + "() :: " + valueName + " = [" + (typeof(value) == "object" ? JSON.stringify(value) : value) + "]\n");
	*/
	
	//document.writeln("## |" + currentTime + "| " + callFunName + "() :: " + valueName1 + " = [" + value + "]<br><\n>"); 
}
// /////////////////////////////////////////////////////////////


/*
 * hcchoi_20170330
 * base64_encode() - base64인코딩 함수
 */
var MaBase64 = {
	// private property
	_keyStr : "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",
 
	// public method for encoding
	encode : function (input) {
		var output = "";
		var chr1, chr2, chr3, enc1, enc2, enc3, enc4;
		var i = 0;
 
		input = MaBase64._utf8_encode(input);
 
		while (i < input.length) {
 
			chr1 = input.charCodeAt(i++);
			chr2 = input.charCodeAt(i++);
			chr3 = input.charCodeAt(i++);
 
			enc1 = chr1 >> 2;
			enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);
			enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);
			enc4 = chr3 & 63;
 
			if (isNaN(chr2)) {
				enc3 = enc4 = 64;
			} else if (isNaN(chr3)) {
				enc4 = 64;
			}
 
			output = output +
			this._keyStr.charAt(enc1) + this._keyStr.charAt(enc2) +
			this._keyStr.charAt(enc3) + this._keyStr.charAt(enc4);
		}
		return output;
	},
 
	// public method for decoding
	decode : function (input) {
		var output = "";
		var chr1, chr2, chr3;
		var enc1, enc2, enc3, enc4;
		var i = 0;
 
		input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");
 
		while (i < input.length) {
 
			enc1 = this._keyStr.indexOf(input.charAt(i++));
			enc2 = this._keyStr.indexOf(input.charAt(i++));
			enc3 = this._keyStr.indexOf(input.charAt(i++));
			enc4 = this._keyStr.indexOf(input.charAt(i++));
 
			chr1 = (enc1 << 2) | (enc2 >> 4);
			chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
			chr3 = ((enc3 & 3) << 6) | enc4;
 
			output = output + String.fromCharCode(chr1);
 
			if (enc3 != 64) {
				output = output + String.fromCharCode(chr2);
			}
			if (enc4 != 64) {
				output = output + String.fromCharCode(chr3);
			}
		}
		output = MaBase64._utf8_decode(output);
 
		return output;
	},
 
	// private method for UTF-8 encoding
	_utf8_encode : function (string) {
		string = string.replace(/\r\n/g,"\n");
		var utftext = "";
 
		for (var n = 0; n < string.length; n++) {
 
			var c = string.charCodeAt(n);
 
			if (c < 128) {
				utftext += String.fromCharCode(c);
			}
			else if((c > 127) && (c < 2048)) {
				utftext += String.fromCharCode((c >> 6) | 192);
				utftext += String.fromCharCode((c & 63) | 128);
			}
			else {
				utftext += String.fromCharCode((c >> 12) | 224);
				utftext += String.fromCharCode(((c >> 6) & 63) | 128);
				utftext += String.fromCharCode((c & 63) | 128);
			}
		}
		return utftext;
	},
 
	// private method for UTF-8 decoding
	_utf8_decode : function (utftext) {
		var string = "";
		var i = 0;
		var c = c1 = c2 = 0;
 
		while ( i < utftext.length ) {
 
			c = utftext.charCodeAt(i);
 
			if (c < 128) {
				string += String.fromCharCode(c);
				i++;
			}
			else if((c > 191) && (c < 224)) {
				c2 = utftext.charCodeAt(i+1); 
				string += String.fromCharCode(((c & 31) << 6) | (c2 & 63));
				i += 2;
			}
			else {
				c2 = utftext.charCodeAt(i+1);
				c3 = utftext.charCodeAt(i+2);
				string += String.fromCharCode(((c & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));
				i += 3;
			}
		}
		return string;
	}
 }


ua = navigator.userAgent;
uaOs = ua.match(/(CrOS\ \w+|Windows\ NT|Mac\ OS\ X|Linux)\ ([\d\._]+)?/);
uaBrowser = ua.match(/(opera|chrome|safari|firefox|msie|trident|edge(?=\/))\/?\s*(\d+)/i) || [];

function getOsName() {
	return uaOs [1] || "Unknown";
}

function getOsVersion(){
	return uaOs [2] || "Unknown";
}

//20160720_hcchoi Linux 일 경우 OS 비트별 다운로드를 하기 위해 비트 체크
function getOsBit(){
	var osBit = "";
	M = ua.match( /\(.*(Windows|Linux).*(WOW64|Win64|i686|x86_64).*?\)/i ) || [];
	if( ua.indexOf("Macintosh") > 0 ){
		osBit = "64";
	}else if( M[2] != null ){
		if( M[2].indexOf("64") > 0 ){
			osBit = "64";
		}else{
		osBit = "32";
		}
	}else{
		osBit = "32";
	}
	
	return osBit;
}

function getBrowserName() {
	var tem;
	if (/trident/i.test(uaBrowser[1])) {
		tem = /\brv[ :]+(\d+)/g.exec(ua) || [];
		return "MSIE";
	}
	if (uaBrowser[1] === "Chrome") {
		tem = ua.match(/\bOPR\/(\d+)/);
		if (tem != null) {
			return "Opera";
		}
		tem = ua.match(/\bEdge\/(\d+)/);
		if (tem != null) {
			return "Edge";
		}
	}
	return uaBrowser[1];
}

function getBrowserVersion() {
	var tem;
	if (/trident/i.test(uaBrowser[0])) {
		//tem = /\brv[ :]+(\d+)/g.exec(ua) || [];
		//return tem[1];
		return "11";
	}
	if (uaBrowser[1] === "Chrome") {
		tem = ua.match(/\bOPR\/(\d+)/);
		if (tem != null) {
			return tem[1];
		}
		tem = ua.match(/\bEdge\/(\d+)/);
		if (tem != null) {
			return tem[1];
		}
	}
	return uaBrowser[2];
}

//20160721_hcchoi 브라우져 비트 체크 ( 테스트 브라우져 - IE, Chrome )
function getBrowserBit(){
	var bsBit = "";
	M = ua.match(/ \(.*(Windows|Linux).*(x64|x86_64).*?\)/) || [];

	if( M[2] != null ){
		if (M[2].indexOf("64") > 0 ){
			bsBit = "64";
		}
	}else{
		bsBit = "32";
	}			
	return bsBit;
}
 
userInfo = new Object();
userInfo.osName = getOsName();
userInfo.osVersion = getOsVersion();
userInfo.osBit = getOsBit();
userInfo.bsName = getBrowserName();
userInfo.bsVersion = getBrowserVersion();
userInfo.bsBit = getBrowserBit();

MDBG("userInfo", userInfo);

/**
 * hcchoi_20180115
 * Init함수. 콜백함수 및 명령어 세팅 후 브로커 호출
 * @param callbackFun - 리턴해줄 콜백 함수. 전역변수 maResJsonData에 최종 결과 JSON 데이터를 받을 수 있습니다.
 * @param commandType - 실행할 명령어 타입. 
 * @param repeatCheckflag - 반복 설치체크 여부. 브로커틀 반복 호출하여 설치체크를 할지 여부
 * @returns
 */
function maBrokerInit(callbackFun, commandType, repeatCheckflag){
	//MDBG("", "start");
	maFunType = commandType;
	maCallBackFun = callbackFun;
	maRepeatCheckflag = repeatCheckflag;

	if( commandType == "getVersion"){
		maBrokerCommand = craeteBoekerCommand(chkFileArray);
	}else if( commandType == "executeBinary"){
		maBrokerCommand = craeteBoekerCommand(executeBinaryArray);
	}else if( commandType == "getClientInfo"){
		maBrokerCommand = craeteBoekerCommand(clientInfo);
	}else if(commandType == "getPrintInfo"){
		maTimeOutCheck_s = 10; 
		maBrokerCommand = craeteBoekerCommand(printInfo);													   
	}else if(commandType == "updatePrinterDAT"){
		maBrokerCommand = craeteBoekerCommand(updatePrinterDATArray);
		maTimeOutCheck_s = 10; 
	}

	maBroker(maBrokerCommand);
	return;
}

function reConnectonMaBroker(reConnectonTime_s){
	setTimeout(function(){
		maBroker(maBrokerCommand);
	}, reConnectonTime_s * 1000);
}

/**
 * hcchoi_20180115
 * URI 세팅 각 실행 명령어의 추가 옵션(addOpt)을 설정 후 JSONP형태로 브로커 호출
 * 브로커 회신 데이터는 maBrokerController()에 전달하여 처리하며 최종 결과값 maResJsonData에 담아 콜백함수에 리턴
 * @param bokerCommand
 * @returns
 */
function maBroker(bokerCommand)
{
	//setBrokerURI
	var brokerServerURI = getBrokerServerURI();
	var d = new Date();
	var h = addZero(d.getHours(), 2);
	var m = addZero(d.getMinutes(), 2);
	var s = addZero(d.getSeconds(), 2);
	var ms = addZero(d.getMilliseconds(), 3);
	var currentTime = h + "" + m + "" + s + "" + ms ;
	var brokerParam = "[MAEPS]" + MaBase64.encode(bokerCommand)+ "[MAEPSEOF]";		// 버전 체크용	
	var brokerServerURL = brokerServerURI + "/?brokerCommand=" + brokerParam + "&Type=json&t=" + currentTime;
	
	var broker = jQuery.ajax({
		url: brokerServerURL,
		dataType: 'jsonp',
		cache: false,
		jsonpCallback: 'maCbBrokerResFun',				//자동으로 넘어갈때 callback=maCbBrokerResFun 변경됨
		timeout: maTimeOutCheck_s * 1000,
		success: function (data, status, err) {
			//maBrokerController(data, status, err);  
		},
		error: function (data, status, err) {
			var maErrString = "";
			maBrokerController(null, status, err);
			if( maRepeatCheckflag === true ){
				reConnectonMaBroker(1);
			}
		}
	});
	MDBG("broker", broker );
}

function maCbBrokerResFun(data){
	MDBG("", "called");
	maBrokerController(data, null, null); 
}

/**
 * hcchoi_20170330<br>
 * http / https 프로토콜에 따른 호출 URI 설정 함수
 */
function getBrokerServerURI()
{
	var maurl;
	if(window.location.protocol === "https:") 
		maurl = "https://127.0.0.1:19876";
	else
		maurl = "http://127.0.0.1:19875";
	
	return maurl;
}


/**
 * hcchoi_20180115
 * 선언되어있는 파일버전과 비교하여 설치여부를 추가로 JSON데이터의 installFag값에 추가하는 함수<br>
 * 버전의 .을 기준으로 앞쪽부터 짤라서 버전비교 / .이 없을 경우 기존 로직
 * installFlag :: true - 최신버전 // false - 미설치, 업데이트 필요
 * 
 * hcchoi_20181220
 * addDot=1이고 미 설치(-1000)이 리턴되었을 경우 로직에 오류로 인해 다른 파일도 체크를 비정상적으로 처리되어 수정.
 * 
 * @param checkFileRetJson - 브로커로부터 리턴받은 파일정보 JSON
 * @returns JsonData<br>	
 * 			ex){ "fileName" : "broker.exe", "fileVersion" : "2510", "installFlag" : "true"} 
 */
function maSetFileInstallFlag(checkFileRetJson){
	var	fileVersionJsonData = checkFileRetJson["fileVerRet"];
	var versionCheckType = maBrokerAddOptJson.getVersion.addDot;
	
	for(var chkFile_i=0; chkFile_i < chkFileArray.length; chkFile_i++){	
		var fileName = fileVersionJsonData[chkFile_i].name;
		var fileVersion = fileVersionJsonData[chkFile_i].version;
		var defineVersion = chkFileArray[chkFile_i][0];
	
		if( fileVersion == -1000 ){ 
			fileVersionJsonData[chkFile_i].installFlag = false;
		}else if(versionCheckType == 0){
			if( fileVersion - defineVersion >= 0 ){
				fileVersionJsonData[chkFile_i].installFlag = true;
			}else{
				fileVersionJsonData[chkFile_i].installFlag = false;
			}
		}else{
			var fileVersionArr = fileVersion.split(".");
			var defineVersionArr = defineVersion.split(".");
			var checkCount = 1;
			
			for(var fileVer_i=0; fileVer_i < fileVersionArr.length; fileVer_i++){
				var versionDifference = fileVersionArr[fileVer_i] - defineVersionArr[fileVer_i];
				if( versionDifference > 0 ){
					fileVersionJsonData[chkFile_i].installFlag = true;
					break;
				}else if( versionDifference == 0 ){
					checkCount++;
					if( checkCount == 4 ){
						fileVersionJsonData[chkFile_i].installFlag = true;
					}
				}else{
					fileVersionJsonData[chkFile_i].installFlag = false;
					break;
				}
			}
		}
		MDBG(chkFile_i + "_" + fileName, "defineVersion = " + defineVersion + " || installVersion = " + fileVersion + " || installFlag = " + fileVersionJsonData[chkFile_i].installFlag);
	}
	return fileVersionJsonData;
}

/**
 *  hcchoi_20170411<Br>
 * 선언한 체크파일 정보를 기반으로 브로커에 보낼 명령어를 JSON형태로 만드는 함수.
 * @param chkFileArray		- 설치체크 파일 정보 배열
 * @returns				- JSON형태의 broker 명령어
 */
function craeteBoekerCommand(brokerParam){
	//MDBG("", "start" );
	var brokerReqJsonData = new Object(); 
	brokerReqJsonData.funType = maFunType;
	
	if( maFunType == "getVersion" ){
		brokerReqJsonData.chkFileInfo = new Array();
		for(var obj_i=0; obj_i < brokerParam.length; obj_i++){
			var checkFile = new Object();
			checkFile.csidl = brokerParam[obj_i][1];
			checkFile.name = brokerParam[obj_i][2];
			checkFile.addPath = brokerParam[obj_i][3];
			
			brokerReqJsonData.chkFileInfo[obj_i] = checkFile;
		}
	}else if( maFunType == "executeBinary" ){
		brokerReqJsonData.executeBinaryInfo = new Array();
		for(var obj_i=0; obj_i < brokerParam.length; obj_i++){
			var executeBinary = new Object();
			executeBinary.parameter = brokerParam[obj_i][0];
			executeBinary.csidl = brokerParam[obj_i][1];
			executeBinary.name = brokerParam[obj_i][2];
			executeBinary.addPath = brokerParam[obj_i][3];
			
			brokerReqJsonData.executeBinaryInfo[obj_i] = executeBinary;
		}
	}else if( maFunType == "getClientInfo" ){
		brokerReqJsonData.clientInfo = new Object();
		brokerReqJsonData.clientInfo = brokerParam;
		
	}else if( maFunType == "getPrintInfo" ){
		brokerReqJsonData.printInfo = new Array();
		for(var obj_i=0; obj_i < brokerParam.length; obj_i++){
			var getPrintInfo = new Object();
			getPrintInfo.parameter = brokerParam[0];
			getPrintInfo.csidl = brokerParam[1];
			getPrintInfo.name = brokerParam[2];
			getPrintInfo.addPath = brokerParam[3];
			getPrintInfo.supportRange = brokerParam[4];
		}
		brokerReqJsonData.printInfo = getPrintInfo;
		
	}else if( maFunType == "updatePrinterDAT" ){
		brokerReqJsonData.printerDATurl = brokerParam[0];
		brokerReqJsonData.printerDATversion = brokerParam[1];	
		brokerReqJsonData.printerDATcookie = brokerParam[2];	
		brokerReqJsonData.printerDAThash = brokerParam[3];
		brokerReqJsonData.csidl = brokerParam[4];	
		brokerReqJsonData.addPath = brokerParam[5];
	}
	brokerReqJsonData.addOpt = maBrokerAddOptJson[maFunType] != undefined ? maBrokerAddOptJson[maFunType] : "";
	//MDBG("json_BrokerComand", JSON.stringify(brokerReqJsonData) );
	return JSON.stringify(brokerReqJsonData);
}

/**
 * hcchoi_20170411<br>
 * broker의 회신을 기반으로 데이터 처리
 * @returns
 */
function maBrokerController(data, status, err){
	MDBG("",	"start" );
	MDBG("status", status );
	MDBG("data", data );
	MDBG("err", err );
			
	//broker에러코드 리턴
	if( typeof(data) == "number" ){
		return maCallBackFun(maSetBrokerErr(data));
	//비정상 통신
	}else if(!data){
		return maCallBackFun(maSetBrokerErr(-9000));
	}
		
	if( maFunType == "getVersion" ){
		maResJsonData = maSetFileInstallFlag(data);
		maGetOnlyInstallFlag();
		if( maOnlyInstallFlag === false && maRepeatCheckflag === true){
			reConnectonMaBroker(1);
		}
	}else{
		maResJsonData = data;
	}
	MDBG("",	"end" );
	return maCallBackFun(maResJsonData);
}


/**
 * hcchoi_20160414<br>
 * 에러코드에 따른 에러 리턴 함수
 */
function maSetBrokerErr(err){
	switch ( err ){
		case -2001:
			maStrError = "요청 데이터가 없습니다.";
			break;

		case -2002:
			maStrError = "시그니처를 찾을 수 없습니다.";
			break;
			
		case -2003:
			maStrError = "명령어 형태가 올바르지 않습니다.";
			break;

		case -9000:
			maStrError = "MaEPSBroker.exe 모듈의 설치 혹은 업데이트가 필요합니다.";
			makeNotInstallBrokerJson();
			break;	
		
		case 0:
			maStrError = "버전 체크 중 오류가 발생 하였습니다.";
			makeNotInstallBrokerJson();
			break;
		
		//broker하위버전 호환
		case 99999:
			maStrError = "요청 데이터가 올바르지 않습니다.";
			break;

		default:
			//하위버전의 호환을 위해서추가 - 파라미터가 이상할 경우 기본적으로 ePageSafer.exe를 찾아 오는 듯..
			//하위버전에서 ePageSafer.exe를 찾아왔거나 미 설치로 25000를 리턴 받았을 경우
			if( err - 30000 < 0 ){
				maStrError = "MaEPSBroker.exe 모듈의 설치 혹은 업데이트가 필요합니다.";
			}else{
				maStrError = "버전 체크 중 오류가 발생 하였습니다."
			}
			break;
	}
	return maStrError;
}

/**
 * hcchoi_20170415<br>
 * 전역변수 maOnlyInstallFlag에 설치 필요 유무설정하는 함수
 */
function maGetOnlyInstallFlag(){
	for(var chkFile_i=0; chkFile_i < maResJsonData.length; chkFile_i++){
		var chkFileInstallFlag = maResJsonData[chkFile_i].installFlag;
		
		if( chkFileInstallFlag == false ){
			maOnlyInstallFlag = false;
			break;
		}else{
			maOnlyInstallFlag = true;
		}
	}
	MDBG("maOnlyInstallFlag", maOnlyInstallFlag);
}

/**
 * hcchoi_20170808<br>
 * 브로커 미설치 시 리턴할 broker JSON객체 생성
 */
function makeNotInstallBrokerJson(){
	//MDBG("", "start");
	maResJsonData = new Array();
	var brokerObj = new Object();
	brokerObj.name = "MaEPSBroker.exe";
	brokerObj.version = "-1000";
	brokerObj.installFlag = false;
	maResJsonData[0] = brokerObj;
}
