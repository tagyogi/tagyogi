<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="ddc.biz.com.repository.ComMapper">

	<!-- 조합원 정보 조회 -->
    <select id="selectMembList" parameterType="Map" resultType="camelMap">
    	/* ComMapper.selectMembList */
    	SELECT MEMB_NO
		     , MEMB_NM
		     , CEO_NM
		     , F_GET_PATTERN(LAW_NO, 'CRP') LAW_NO
		     , F_GET_PATTERN(BIZ_NO, 'BIZ') BIZ_NO
		     , MEMB_DIV
		     , F_GET_CD_NM('MB07', MEMB_DIV) MEMB_DIV_NM
		     , MEMB_STAT
		     , F_GET_CD_NM('MB08', MEMB_STAT) MEMB_STAT_NM
		     , MEMB_CD
		     , F_GET_CD_NM('MB24', MEMB_CD) MEMB_CD_NM
		     , TEL_NO
		     , FAX_NO
		     , ADDR_DIV
		     , F_GET_CD_NM('MB01', ADDR_DIV) ADDR_DIV_NM
		     , POST_NO
		     , ADDR1
		     , ADDR2
		     , DORO_CD
		     , DORO_NM
		     , DORO_BUNHO
		     , DORO_DONG
		     , DORO_DTL
		     , DORO_BD_NO
		     , CASE WHEN ADDR_DIV = 'JB' THEN '('||POST_NO||') ' || ADDR1||' '||ADDR2
		            ELSE POST_NO||' '||DORO_NM||' ('||DORO_DONG||' '||DORO_BD_NO||') ' || DORO_DTL
		            END ADDR_FULL
		     , F_GET_PATTERN(JOIN_DT, 'DT') JOIN_DT
		     , LEAVE_DT
		     , BUSS_ETC
		     , REQ_NO
		     , EMP_CNT
		     , ASSET_AMT
		     , CAPI_AMT
		     , YEAR_SALE_AMT
		     , MAIN_PROD
		     , BUSS_COND
		     , F_GET_PATTERN(BUSS_START_DT, 'DT') BUSS_START_DT
		     , BELONG
		     , MAIN_BUSS_CD
		     , F_GET_CD_NM('MB02', MAIN_BUSS_CD) MAIN_BUSS_NM
		     , SUB_BUSS_CDS
		     , F_GET_CD_NM('MB02', SUB_BUSS_CDS) SUB_BUSS_CDS_NM
		     , DEPO_NM
		     , HOMEPAGE
		     , BUSS_HOMEPAGE
		     , BUSS_TEL_NO
		     , BUSS_FAX_NO
		     , POST_GET_CD
		     , F_GET_CD_NM('MB23',POST_GET_CD) POST_GET_NM
		     , SACT_CD
		     , F_GET_CD_NM('MB26',SACT_CD) SACT_CD_NM
		     , SACT_DT
		     , KED_YN
		     , REMARK MEMB_REMARK
		     , SEAL_FILE_NM
		     , SEAL_FILE_SRC
		     , SEAL_FILE_PATH
		     , PERS_SEAL_FILE_NM
		     , PERS_SEAL_FILE_SRC
		     , PERS_SEAL_FILE_PATH
		     , MEMB_CRETOP
		     , NVL(F_GET_CD_NM('CRET',MEMB_CRETOP), '정상') MEMB_CRETOP_NM
		     , MEMO
		     , COMP_EMAIL
		     , KNOW_CDS
		     , WEB_KEYWORD
		     , REC_PERS
		     , REC_COMP
		     , ETC_CONT
		     , INVEST_VIEW_YN
		     , NVL(CARD_YN, 'N') CARD_YN
		  FROM MB_MASTER M
		<where>
			<if test="sMembNo != null and sMembNo != ''">
			AND MEMB_NO = #{sMembNo}
			</if>
			<if test="sMembNm != null and sMembNm != ''">
			AND MEMB_NM LIKE '%' || #{sMembNm} || '%'
			</if>
			<if test="sLawNo != null and sLawNo != ''">
			AND LAW_NO LIKE '%' || REPLACE(#{sLawNo}, '-') || '%'
			</if>
			<if test="sBizNo != null and sBizNo != ''">
			AND BIZ_NO LIKE '%' || REPLACE(#{sBizNo}, '-') || '%'
			</if>
			<if test="sCeoNm != null and sCeoNm != ''">
			AND CEO_NM LIKE '%' || #{sCeoNm} || '%'
			</if>
		</where>
		 ORDER BY MEMB_NO DESC
    </select>

	<!-- 조합원 기본 -->
	<sql id="membCols">
		M.MEMB_NO
	     , MEMB_NM
	     , CEO_NM
	     , F_GET_PATTERN(LAW_NO, 'CRP') LAW_NO
	     , F_GET_PATTERN(BIZ_NO, 'BIZ') BIZ_NO
	     , MEMB_DIV
	     , F_GET_CD_NM('MB07', MEMB_DIV) MEMB_DIV_NM
	     , MEMB_STAT
	     , F_GET_CD_NM('MB08', MEMB_STAT) MEMB_STAT_NM
	     , MEMB_CD
	     , F_GET_CD_NM('MB24', MEMB_CD) MEMB_CD_NM
	     , TEL_NO
	     , FAX_NO
	     , ADDR_DIV
	     , F_GET_CD_NM('MB01', ADDR_DIV) ADDR_DIV_NM
	     , POST_NO
	     , ADDR1
	     , ADDR2
	     , DORO_CD
	     , DORO_NM
	     , DORO_BUNHO
	     , DORO_DONG
	     , DORO_DTL
	     , DORO_BD_NO
	     , CASE WHEN ADDR_DIV = 'JB' THEN '('||POST_NO||') ' || ADDR1||' '||ADDR2
	            ELSE POST_NO||' '||DORO_NM||' ('||DORO_DONG||' '||DORO_BD_NO||') ' || DORO_DTL
	            END ADDR_FULL
	     , DORO_NM||' ('||DORO_DONG||' '||DORO_BD_NO||')' ADDR_FULL_DORO
	     , BUSS_ADDR_DIV
	     , BUSS_POST_NO
	     , BUSS_ADDR1
	     , BUSS_DORO_CD
	     , BUSS_DORO_NM
	     , BUSS_DORO_BUNHO
	     , BUSS_DORO_DONG
	     , BUSS_DORO_DTL
	     , BUSS_DORO_BD_NO
	     , CASE WHEN BUSS_ADDR_DIV = 'JB' THEN '('||BUSS_POST_NO||') ' ||BUSS_ADDR1||' '||BUSS_ADDR2
	            ELSE BUSS_POST_NO||' '||BUSS_DORO_NM||' '||BUSS_DORO_BUNHO||'('||BUSS_DORO_DONG||' '||BUSS_DORO_BD_NO||') ' || BUSS_DORO_DTL
	            END BUSS_ADDR_FULL
	     , BUSS_DORO_NM||' '||BUSS_DORO_BUNHO||'('||BUSS_DORO_DONG||' '||BUSS_DORO_BD_NO||')' BUSS_ADDR_FULL_DORO
	     , F_GET_PATTERN(JOIN_DT, 'DT') JOIN_DT
	     , LEAVE_DT
	     , BANK_CD
	     , F_GET_CD_NM('CM02', BANK_CD) BANK_NM
	     , ACCT_NO
	     , BUSS_ETC
	     , REQ_NO
	     , EMP_CNT
	     , ASSET_AMT
	     , CAPI_AMT
	     , YEAR_SALE_AMT
	     , MAIN_PROD
	     , BUSS_COND
	     , F_GET_PATTERN(BUSS_START_DT, 'DT') BUSS_START_DT
	     , BELONG
	     , MAIN_BUSS_CD
	     , F_GET_CD_NM('MB02', MAIN_BUSS_CD) MAIN_BUSS_NM
	     , SUB_BUSS_CDS
	     , F_GET_CD_NM('MB02', SUB_BUSS_CDS) SUB_BUSS_CDS_NM
	     , DEPO_NM
	     , HOMEPAGE
	     , BUSS_HOMEPAGE
	     , BUSS_TEL_NO
	     , BUSS_FAX_NO
	     , POST_GET_CD
	     , F_GET_CD_NM('MB23',POST_GET_CD) POST_GET_CD_NM
	     , SACT_CD
	     , F_GET_CD_NM('MB26',SACT_CD) SACT_CD_NM
	     , SACT_DT
	     , KED_YN
	     , REMARK MEMB_REMARK
	     , SEAL_FILE_NM
	     , SEAL_FILE_SRC
	     , SEAL_FILE_PATH
	     , PERS_SEAL_FILE_NM
	     , PERS_SEAL_FILE_SRC
	     , PERS_SEAL_FILE_PATH
	     , MEMB_CRETOP
	     , NVL(F_GET_CD_NM('CRET',MEMB_CRETOP), '정상') MEMB_CRETOP_NM
	     , MEMO
	     , COMP_EMAIL
	     , KNOW_CDS
	     , WEB_KEYWORD
	     , REC_PERS
	     , REC_COMP
	     , ETC_CONT
	     , USER_ID
	     , USER_PW
	     , INVEST_VIEW_YN
	     , NVL(CARD_YN, 'N') CARD_YN
	     , DEPT
	     , CONTR_OVER_YN  /* 한도 직접입력 대상 */
	     , (SELECT COUNT(*) FROM AC_SEQUEST WHERE MEMB_NO = M.MEMB_NO AND CAN_CD = '1') SEST_CNT
	     , NVL(F_GET_INVEST_NUM(M.MEMB_NO), 0) INVEST_NUM /*출자좌수, 기간전체기준*/
	     , NVL(F_GET_INVEST_AMT(M.MEMB_NO), 0) INVEST_AMT /*출자금액, 기간전체기준*/

	     , F_GET_MORT_NUM(M.MEMB_NO) MORT_NUM /*담보좌수*/
	     , F_GET_MORT_AMT(M.MEMB_NO) MORT_AMT
	     , F_GET_DEPT_NUM(M.MEMB_NO) DEPT_NUM /*예수좌수*/

	     , NVL(F_GET_ASS_GET_NUM(M.MEMB_NO), 0) ASS_GET_NUM /*배정받은좌수*/
	     , F_GET_ASS_GET_AMT(M.MEMB_NO) ASS_GET_AMT
	     , NVL(F_GET_ASS_SET_NUM(M.MEMB_NO), 0) ASS_SET_NUM /*배정부여좌수*/
	     , F_GET_ASS_SET_AMT(M.MEMB_NO) ASS_SET_AMT

	     , F_GET_BILL_KEEP_NUM(M.MEMB_NO) BILL_KEEP_NUM
	     , F_GET_CONTR_USE_NUM(M.MEMB_NO) CONTR_USE_NUM /*약정사용좌수 보증,융자 */
	     , F_GET_CONTR_USE_AMT(M.MEMB_NO) CONTR_USE_AMT /*약정사용금액*/
	     , (SELECT MAX(CONTR_NO) FROM GR_MASTER WHERE GUAR_STAT = '90' AND MEMB_NO = M.MEMB_NO) GUAR_CONTR_NO /* 보증한도약정번호(정상) */
	     , (SELECT MAX(CONTR_NO) FROM LD_CONTRACT WHERE CONTR_TYPE = '21' AND CONTR_STAT = '10' AND MEMB_NO = M.MEMB_NO ) LEND_CONTR_NO /* 대출한도약정번호(정상) */
	     , (SELECT COUNT (*) FROM GR_MORT WHERE MEMB_NO = M.MEMB_NO AND MORT_YN = 'Y' ) MORT_CNT /* 담보개수 */
	     , NVL(F_GET_BAS_DTM_INVEST_NUM(M.MEMB_NO, #{basDt}, #{investNo}),0) BAS_INVEST_NUM /*출자업무날짜기준 출자좌수*/
	     , NVL(F_GET_BAS_DTM_INVEST_AMT(M.MEMB_NO, #{basDt}, #{investNo}),0) BAS_INVEST_AMT /*출자업무날짜기준 출자금액*/
	     , NVL((SELECT SUM(DECODE(PAY_TYPE, 'P', PAY_AMT, PAY_AMT * -1)) FROM IV_DEP_PAY WHERE MEMB_NO = M.MEMB_NO),0) DEP_AMT
	     /* 사용여부 확인 필요
	     , F_GET_CONTR_MAX_NUM(M.MEMB_NO) CONTR_MAX_NUM
	     , F_GET_CONTR_MAX_AMT(M.MEMB_NO) CONTR_MAX_AMT
	     */
	</sql>

    <!-- 조합원 정보 조회 -->
    <select id="selectMemb" parameterType="Map" resultType="camelMap">
    	/* ComMapper.selectMemb */
    	SELECT A.*
    	      , ASS_GET_NUM - ASS_SET_NUM ASSIGN_NUM  /*배정좌수*/
    	      , MORT_NUM + DEPT_NUM TOT_NUM /*총좌수*/
    	      , MORT_NUM + DEPT_NUM + ASS_GET_NUM - ASS_SET_NUM - CONTR_USE_NUM REMAIN_NUM /*잔여좌수*/
    	  FROM
	    	  (
	    	SELECT
	    	     <include refid="membCols" />
			  FROM MB_MASTER M
			 WHERE MEMB_NO = #{membNo}
		) A
    </select>

    <!-- 조합원 정보 조회(사업자번호) -->
    <select id="selectMembBizNo" parameterType="Map" resultType="camelMap">
    	/* ComMapper.selectMembBizNo */
    	SELECT *
		  FROM MB_MASTER
		 WHERE BIZ_NO = #{bizNo}
    </select>

    <!-- 조합원 정보 조회(인증서) -->
    <select id="selectMembCert" parameterType="Map" resultType="camelMap">
    	/* ComMapper.selectMembCert */
		  SELECT MEMB_NO
		       , USER_DN
		       , CERT_SN
		       , START_DATE
		       , END_DATE
		       , F_GET_CRYPT_DEC(USER_NUM) USER_NUM
		    FROM MB_CERT MC
		  WHERE (USER_DN, REG_DTM) IN
		                          (
		                          SELECT USER_DN, MAX(REG_DTM)
		                            FROM MB_CERT
		                            WHERE USER_DN = #{userDn}
		                              AND SUBSTR(MC.START_DATE, 0, 8) &lt;= TO_CHAR(SYSDATE, 'YYYYMMDD')
                                      AND SUBSTR(MC.END_DATE, 0, 8) &gt;= TO_CHAR(SYSDATE, 'YYYYMMDD')
		                            GROUP BY USER_DN
		                          )
    </select>

    <!-- 인증서 등록 -->
	<insert id="insertMembCert" parameterType="Map"  >
		/* ComMapper.insertMembCert */
		MERGE
		 INTO MB_CERT A
		USING DUAL
		  ON (
		  	A.MEMB_NO = #{membNo}
		  	AND A.USER_DN = #{userDn}
		  	AND A.CERT_SN = #{certSn}
		  )
		 WHEN MATCHED THEN
		      UPDATE SET
		      		    START_DATE = #{startDate}
		        		, END_DATE = #{endDate}
		        		, USER_NUM = F_GET_CRYPT_ENC(#{userNum})
		        		, MOD_DTM = SYSDATE
		 WHEN NOT MATCHED THEN
		     INSERT (MEMB_NO, USER_DN, CERT_SN, START_DATE, END_DATE, USER_NUM, REG_DTM, MOD_DTM)
		     VALUES (#{membNo}, #{userDn}, #{certSn}, #{startDate}, #{endDate}, F_GET_CRYPT_ENC(#{userNum}), SYSDATE, SYSDATE)
	</insert>

	<!-- 공통코드 조회 -->
    <select id="selectCodeList" parameterType="Map" resultType="camelMap">
    	/* ComMapper.selectCodeList */
    	SELECT
    		CD_TYPE
	    	, CD
	    	, CD_NM
	    	, USE_YN
	    	, SEQ
	    	, ETC_CD
	    	, ETC_DESC
	    	, REMARK
	    	, REF_VAL1
	    	, REG_DTM
	    	, REG_NM
	    	, MOD_DTM
	    	, MOD_NM
    	  FROM CM_CODE
         WHERE USE_YN = 'Y'
           AND CD_TYPE != 'ROOT'
       <choose>
        	<when test="codeList.size != 0">
            AND CD_TYPE IN
		        <foreach collection="codeList" item="item" index="index" separator="," open="(" close=")">
		        	#{item}
		        </foreach>
            </when>
        </choose>
    	ORDER BY SEQ
    </select>

	<!-- 공통코드 명조회 -->
    <select id="selectCodeDtlNm" parameterType="Map" resultType="String">
    	/* ComMapper.selectCodeDtlNm */
    	SELECT CD_NM
    	  FROM CM_CODE
         WHERE CD_TYPE = #{cdType}
           AND CD = #{cd}
           AND USE_YN = 'Y'
    </select>


    <!-- 공통코드 정보조회 -->
    <select id="selectCodeDtl" parameterType="Map" resultType="camelMap">
    	/* ComMapper.selectCodeDtlNm */
    	SELECT *
    	  FROM CM_CODE
         WHERE CD_TYPE = #{cdType}
           AND CD_NM = #{cdNm}
           AND USE_YN = 'Y'
    </select>

    <!-- 그리드 정보 조회 -->
    <!-- ResultMap -->
    <resultMap id="resultMap" type="java.util.HashMap">
		<result column="COL_NM" property="Header" />
		<result column="COL_ID" property="Name" />
		<result column="COL_TYPE" property="Type" />
		<result column="COL_ALIGN" property="Align" />
		<result column="COL_WIDTH" property="MinWidth" />
		<result column="COL_FORMT" property="Format" />
		<result column="COL_FORMT" property="CustomFormat" />
		<result column="COL_FORMT_EDIT" property="EditFormat" />
		<result column="COL_COLOR" property="TextColor" />
		<result column="COL_REQUR" property="Required" />
		<result column="COL_VISIBLE" property="Visible" />
		<result column="COL_EDIT" property="CanEdit" />
		<result column="COL_ENUM" property="Enum" />
		<result column="COL_ENUMKEYS" property="EnumKeys" />
		<result column="COL_RELWIDTH" property="RelWidth" />
		<result column="COL_MERGE" property="ColMerge" />
		<result column="COL_CALC" property="FormulaRow" />
		<result column="GRID_NO" property="gridNo" />
		<result column="BTN_TEXT" property="ButtonText" />
		<result column="COL_EXCEL" property="excelYn" />
	</resultMap>
    <select id="selectGridDtlList" parameterType="Map" resultMap="resultMap">
    	/* ComMapper.selectGridDtlList */
    	SELECT
    		COL_NM
    		, COL_ID
    		, COL_TYPE
    		, COL_ALIGN
    		, COL_WIDTH
    		, COL_FORMT
    		, COL_FORMT AS COL_FORMT_EDIT
    		, COL_COLOR
    		, DECODE(COL_REQUR, 'N', 0, 'Y', 1, COL_REQUR) COL_REQUR
    		, DECODE(COL_VISIBLE, 'N', 0, 'Y', 1, COL_VISIBLE) COL_VISIBLE
    		, NVL(DECODE(COL_EDIT, 'N', 0, 'Y', 1, COL_EDIT), 1) COL_EDIT
    		, (
	    		SELECT '|'||LISTAGG(CD_NM, '|') WITHIN GROUP(ORDER BY SEQ, CD)
			     FROM CM_CODE
			     WHERE CD_TYPE = A.COL_ENUM
			       AND USE_YN = 'Y'
    		) AS COL_ENUM
    		, (
	    		SELECT '|'||LISTAGG(CD, '|') WITHIN GROUP(ORDER BY SEQ, CD)
			     FROM CM_CODE
			     WHERE CD_TYPE = A.COL_ENUM
			       AND USE_YN = 'Y'
    		) AS COL_ENUMKEYS
    		, CASE WHEN NVL(DECODE(COL_VISIBLE, 'N', 0, 'Y', 1, COL_VISIBLE), '1') = '1' THEN 1 ELSE 0 END COL_RELWIDTH
    		, NVL(COL_MERGE, 0) AS COL_MERGE
    		, GRID_NO
    		, COL_CALC
    		, DECODE(COL_EXCEL, 'N', 0, 'Y', 1, COL_EXCEL) COL_EXCEL
    		, DECODE(COL_TYPE, 'Button', NVL(COL_ENUM, COL_NM), '') BTN_TEXT
    	  FROM CM_GRID_COLS A
    	<where>
    	  <if test="gridNo != null and gridNo != ''">
		  AND GRID_NO = #{gridNo}
		  </if>

          <if test="gridList != null and gridList != ''">
          <choose>
        	<when test="gridList.size != 0">
            AND GRID_NO IN
		        <foreach collection="gridList" item="item" index="index" separator="," open="(" close=")">
		        	#{item}
		        </foreach>
            </when>
           </choose>
           </if>
        </where>
    	ORDER BY COL_ORD
    </select>


    <!-- 민원 신청 조회 -->
    <select id="selectWorkReq" parameterType="Map" resultType="camelMap">
    	/* ComMapper.selectWorkReq */
    	SELECT
    	      (SELECT COUNT (*) FROM CM_BRD A, CM_BRD_ANSWER B WHERE A.BRD_NO = '6' AND A.BRD_NO = B.BRD_NO(+) AND A.BRD_SEQ = B.BRD_SEQ(+) AND B.BRD_SEQ IS NULL ) QNA_CNT
		      , (SELECT COUNT (*) CNT FROM MB_CHANGE_REQ WHERE PROC_STAT = '10') MEM_CNT
		      , (SELECT COUNT (*) CNT FROM IV_MASTER WHERE INVEST_CD IN ('10', '11') AND PROC_STAT = '10') IVT_CNT

		      , (SELECT COUNT (*) FROM GR_MASTER WHERE GUAR_STAT = '10' AND GUAR_TYPE = '11' AND GUAR_ISSUE_CD != 'V') BID_CNT
		      , (SELECT COUNT (*) FROM GR_MASTER WHERE GUAR_STAT = '10' AND GUAR_TYPE = '12' AND GUAR_ISSUE_CD != 'V') CTR_CNT
		      , (SELECT COUNT (*) FROM GR_MASTER WHERE GUAR_STAT = '10' AND GUAR_TYPE = '13' AND GUAR_ISSUE_CD != 'V') DEF_CNT
		      , (SELECT COUNT (*) FROM GR_MASTER WHERE GUAR_STAT = '10' AND GUAR_TYPE = '14' AND GUAR_ISSUE_CD != 'V') PAY_CNT
		      , (SELECT COUNT (*) FROM GR_MASTER WHERE GUAR_STAT = '10' AND GUAR_TYPE = '15' AND GUAR_ISSUE_CD != 'V') PER_CNT
		      , (SELECT COUNT (*) FROM GR_MASTER WHERE GUAR_STAT = '10' AND GUAR_TYPE = '21' AND GUAR_ISSUE_CD != 'V') DEB_CNT
		      , (SELECT COUNT (*) FROM GR_MASTER WHERE GUAR_STAT = '10' AND GUAR_TYPE = '31' AND GUAR_ISSUE_CD != 'V') EFF_CNT
		      , (SELECT COUNT (*) FROM GR_MASTER WHERE GUAR_STAT = '10' AND GUAR_TYPE = '32' AND GUAR_ISSUE_CD != 'V') PEM_CNT
		      , (SELECT COUNT (*) FROM GR_MASTER WHERE GUAR_STAT = '10' AND GUAR_TYPE = '33' AND GUAR_ISSUE_CD != 'V') SEL_CNT
		      , (SELECT COUNT (*) FROM GR_MASTER WHERE GUAR_STAT = '10' AND GUAR_TYPE = '34' AND GUAR_ISSUE_CD != 'V') REP_CNT

		      , (SELECT COUNT (*) FROM CM_CONF WHERE PROC_STAT = '10' AND CONF_CD = 'IP') CNF_IP_CNT /* 출자좌수증명원 */
		      , (SELECT COUNT (*) FROM CM_CONF WHERE PROC_STAT = '10' AND CONF_CD = 'IK') CNF_IK_CNT /* 출자증권보관증 */
		      , (SELECT COUNT (*) FROM CM_CONF WHERE PROC_STAT = '10' AND CONF_CD = 'DP') CNF_DP_CNT /* 예수금증명원 */
		      , (SELECT COUNT (*) FROM CM_CONF WHERE PROC_STAT = '10' AND CONF_CD = 'GR') CNF_GR_CNT /* 보증잔액증명서 */
		      , (SELECT COUNT (*) FROM CM_CONF WHERE PROC_STAT = '10' AND CONF_CD = 'LP') CNF_LP_CNT /* 대출상환증명서 */
		      , (SELECT COUNT (*) FROM CM_CONF WHERE PROC_STAT = '10' AND CONF_CD = 'LR') CNF_LR_CNT /* 대출잔액증명서 */
		      , (SELECT COUNT (*) FROM CM_CONF WHERE PROC_STAT = '10' AND CONF_CD = 'LI') CNF_LI_CNT /* 대출이자납입증명서 */
		      , (SELECT COUNT (*) FROM CM_CONF WHERE PROC_STAT = '10' AND CONF_CD = 'FL') CNF_FL_CNT /* 금융거래확인서 */

		      , (SELECT COUNT (*) FROM AC_GR_ACCIDENT WHERE ACC_STAT_CD = '31') ACC_CNT

		      , (SELECT COUNT (*) FROM CM_BRD WHERE BRD_NO = '6') QNA_TOT_CNT
		      , (SELECT COUNT (*) FROM MB_CHANGE_REQ) MEM_TOT_CNT
		      , (SELECT COUNT (*) FROM IV_MASTER WHERE INVEST_CD = '11') IVT_TOT_CNT

		      , (SELECT COUNT (*) FROM GR_MASTER WHERE GUAR_TYPE = '11' AND GUAR_ISSUE_CD != 'V') BID_TOT_CNT
		      , (SELECT COUNT (*) FROM GR_MASTER WHERE GUAR_TYPE = '12' AND GUAR_ISSUE_CD != 'V') CTR_TOT_CNT
		      , (SELECT COUNT (*) FROM GR_MASTER WHERE GUAR_TYPE = '13' AND GUAR_ISSUE_CD != 'V') DEF_TOT_CNT
		      , (SELECT COUNT (*) FROM GR_MASTER WHERE GUAR_TYPE = '14' AND GUAR_ISSUE_CD != 'V') PAY_TOT_CNT
		      , (SELECT COUNT (*) FROM GR_MASTER WHERE GUAR_TYPE = '15' AND GUAR_ISSUE_CD != 'V') PER_TOT_CNT

		      , (SELECT COUNT (*) FROM GR_MASTER WHERE GUAR_TYPE = '21' AND GUAR_ISSUE_CD != 'V') DEB_TOT_CNT
		      , (SELECT COUNT (*) FROM GR_MASTER WHERE GUAR_TYPE = '31' AND GUAR_ISSUE_CD != 'V') EFF_TOT_CNT
		      , (SELECT COUNT (*) FROM GR_MASTER WHERE GUAR_TYPE = '32' AND GUAR_ISSUE_CD != 'V') PEM_TOT_CNT
		      , (SELECT COUNT (*) FROM GR_MASTER WHERE GUAR_TYPE = '33' AND GUAR_ISSUE_CD != 'V') SEL_TOT_CNT
		      , (SELECT COUNT (*) FROM GR_MASTER WHERE GUAR_TYPE = '34' AND GUAR_ISSUE_CD != 'V') REP_TOT_CNT

		      , (SELECT COUNT (*) FROM CM_CONF WHERE CONF_CD = 'IP') CNF_IP_TOT_CNT /* 출자좌수증명원 */
		      , (SELECT COUNT (*) FROM CM_CONF WHERE CONF_CD = 'IK') CNF_IK_TOT_CNT /* 출자증권보관증 */
		      , (SELECT COUNT (*) FROM CM_CONF WHERE CONF_CD = 'DP') CNF_DP_TOT_CNT /* 예수금증명원 */
		      , (SELECT COUNT (*) FROM CM_CONF WHERE CONF_CD = 'GR') CNF_GR_TOT_CNT /* 보증잔액증명서 */
		      , (SELECT COUNT (*) FROM CM_CONF WHERE CONF_CD = 'LP') CNF_LP_TOT_CNT /* 대출상환증명서 */
		      , (SELECT COUNT (*) FROM CM_CONF WHERE CONF_CD = 'LR') CNF_LR_TOT_CNT /* 대출잔액증명서 */
		      , (SELECT COUNT (*) FROM CM_CONF WHERE CONF_CD = 'LI') CNF_LI_TOT_CNT /* 대출이자납입증명서 */
		      , (SELECT COUNT (*) FROM CM_CONF WHERE CONF_CD = 'FL') CNF_FL_TOT_CNT /* 금융거래확인서 */

		      , (SELECT COUNT (*) FROM AC_GR_ACCIDENT) ACC_TOT_CNT

		      , TO_CHAR (SYSDATE, 'HH24:MI') NOW_DTM

		      , (SELECT COUNT(*) FROM GR_MASTER WHERE PROC_STAT = '22' AND EXAM_NM = #{userNm} AND EXAM_DTM IS NULL) GR_EXAM_CNT
              , (SELECT COUNT(*) FROM GR_MASTER WHERE DEC_DIR_ID  = #{userId} AND DEC_DIR_DT IS NULL ) AS DEC_DIR_CNT
              , (SELECT COUNT(*) FROM GR_MASTER WHERE DEC_MNG_ID  = #{userId} AND DEC_MNG_DT IS NULL ) AS DEC_MNG_CNT
              , (
	              SELECT COUNT(*)
	              FROM GR_MASTER
	             WHERE AFTER_PAY_YN = 'Y'
	               /*AND NVL(PAY_YN, 'H') != 'Y'
	               AND TO_DATE(GUAR_PUB_DT, 'YYYYMMDD') + 60 &lt;= SYSDATE*/
	               AND NVL(DECODE(PAY_YN, 'Y', 'Y', 'N'), 'N') != 'Y'
	               AND TO_CHAR(ADD_MONTHS(GUAR_PUB_DT, 3), 'YYYYMMDD') &lt;= TO_CHAR(SYSDATE, 'YYYYMMDD')
	               AND GUAR_STAT NOT IN ('10', '31')
	               AND PROC_STAT IN ('40','41','42','80','90') /* 발급가능, 기관전송, 전송반력, 전송완료, 발급완료 */
               ) AS NOPAY_CNT
               , (
               SELECT COUNT(*)
				  FROM
				  (
				SELECT A.GUAR_NO
				     , A.PROC_STAT
				     , (SELECT COUNT(*) FROM GR_ELECT_HIST WHERE GUAR_NO = A.GUAR_NO AND SEND_FLAG = 'S') G2B_SEND_CNT
				  FROM GR_MASTER A
				     , MB_MASTER B
				 WHERE A.MEMB_NO = B.MEMB_NO
				   AND GUAR_ISSUE_CD = 'G'
				   AND A.PROC_STAT IN ('40','41','42') /* 발급가능, 기관전송, 전송반력 */
				   AND GUAR_STAT = '90'
				   )
				WHERE G2B_SEND_CNT = 0
               ) AS G2B_CNT
		  FROM DUAL
		  ORDER BY 1 DESC
    </select>

    <!-- 첨부파일관리번호 추출 -->
	<select id="selectAtthNo" parameterType="map" statementType="CALLABLE" resultType="String" >
		/* ComMapper.selectAtthNo */
 		{
 			CALL P_GET_ATTH_NO( #{atthType}, #{atthNo, mode=OUT, jdbcType=VARCHAR, javaType=String} )
 		}
    </select>

    <!-- 시퀀스번호 추출 -->
	<select id="selectSeqNo" parameterType="map" resultType="String" >
		/* ComMapper.selectSeqNo */
 		SELECT F_GET_YEAR_SEQ(#{bussGbn}, #{year}) SEQ_NO
          FROM DUAL
    </select>

 	<!-- 보증인정보조회 (보증/융자 약정 보증인 관련) -->
	<select id="selectSure" parameterType="map" resultType="camelMap" >
		/* ComMapper.selectSure */
		SELECT MAX(MEMB_NO) MEMB_NO
		     , MAX(CEO_SEQ) CEO_SEQ
		     , MAX(SURE_NO) SURE_NO
		     , MAX(SURE_NM) SURE_NM
		     , #{juminNo} JUMIN_NO
		  FROM
		  (
		    SELECT MEMB_NO
		         , CEO_SEQ
		         , NULL SURE_NO
		         , CEO_NM SURE_NM
		         , F_GET_CRYPT_DEC(JUMIN_NO) JUMIN_NO
		         , NULL BIZ_NO
		      FROM MB_CEO_VIEW
		     WHERE JUMIN_NO = #{juminNo}
		     UNION ALL
		     SELECT NULL MEMB_NO
		         , NULL CEO_SEQ
		         , SURE_NO
		         , SURE_NM
		         , JUMIN_NO
		         , NULL BIZ_NO
		      FROM CM_SURETY_VIEW
		     WHERE JUMIN_NO = #{juminNo}
		     UNION ALL
		     SELECT NULL MEMB_NO
	              , NULL CEO_SEQ
	              , SURE_NO
	              , SURE_NM
	              , NULL JUMIN_NO
	              , BIZ_NO
	          FROM CM_SURETY_VIEW
	         WHERE BIZ_NO = #{bizNo}
		      )

    </select>



 	<!-- 즐겨찾기 현황 -->
	<select id="selectUserMenuFavList" parameterType="map" resultType="camelMap" >
		/* ComMapper.selectUserMenuFavList */
		SELECT A.USER_ID
		     , B.MENU_CD
		     , B.PARENT_CD
		     , B.MENU_NM
		     , B.MENU_PATH
		     , B.MENU_STEP
		     , B.MENU_PAGE
		  FROM CM_MENU_FAV A
		     , CM_MENU B
		 WHERE A.MENU_CD = B.MENU_CD
		   AND A.USER_ID = #{userId}
		   AND B.USE_YN = 'Y'
		   AND B.MENU_YN = 'Y'
		   AND A.FAV_YN = 'Y'
    </select>

 	<!-- 즐겨찾기 추가 -->
	<insert id="insertUserMenuFav" parameterType="Map"  >
		/* ComMapper.insertUserMenuFav */
		MERGE
		 INTO CM_MENU_FAV A
		USING DUAL
		  ON (
		  	A.USER_ID = #{userId}
		    AND A.MENU_CD = #{menuCd}
		  )
		 WHEN MATCHED THEN
		      UPDATE SET FAV_YN = DECODE(FAV_YN, 'Y', 'N', 'N', 'Y', 'N')
		 WHEN NOT MATCHED THEN
		     INSERT (USER_ID, MENU_CD, FAV_YN)
		     VALUES (#{userId}, #{menuCd}, 'Y')
	</insert>


	<!--업무메모 조회-->
	<select id="selectUserMemoList" parameterType="Map" resultType="camelMap">
		/* ComMapper.selectUserMemoList*/
		SELECT
			USER_ID
			, MEMO_SEQ
			, MEMO_CONT
			, DEL_YN
			, REG_DTM
		  FROM CM_MEMO
		 WHERE USER_ID = #{userId}
		   AND DEL_YN = 'N'
	     ORDER BY MEMO_SEQ DESC
	</select>

	<!--업무메모 상세 조회-->
	<select id="selectUserMemo" parameterType="Map" resultType="camelMap">
		/* ComMapper.selectUserMemo*/
		SELECT
			USER_ID
			, MEMO_SEQ
			, MEMO_CONT
			, TO_CHAR(REG_DTM, 'YYYYMMDD') REG_DT
		  FROM CM_MEMO
		 WHERE USER_ID = #{userId}
		   AND MEMO_SEQ = #{memoSeq}
		   AND DEL_YN = 'N'
	</select>

	<!-- 업무메모 등록 처리 -->
	<insert id="insertUserMemo" parameterType="Map"  >
		/* ComMapper.insertUserMemo */
		<selectKey resultType="java.lang.String" keyProperty="memoSeq" order="BEFORE">
	        SELECT NVL(MAX(MEMO_SEQ),0) + 1 FROM CM_MEMO
	        WHERE USER_ID = #{userId}
	    </selectKey>
		INSERT INTO CM_MEMO (
			USER_ID
			, MEMO_SEQ
			, MEMO_CONT
			, DEL_YN
			, REG_DTM
		) VALUES (
			#{userId}
			, #{memoSeq}
			, #{memoCont}
			, NVL(#{delYn},'N')
			, SYSDATE
		)
	</insert>

	<!-- 업무메모 수정 처리 -->
	<update id="updateUserMemo" parameterType="Map"  >
		/* ComMapper.updateUserMemo */
		UPDATE CM_MEMO
		SET
			MEMO_CONT = #{memoCont}
			<if test='chkDel != null and chkDel != "" and chkDel == "Y"'>
				, DEL_YN = 'Y'
			</if>
			, REG_DTM = SYSDATE
		WHERE USER_ID = #{userId}
   		AND MEMO_SEQ = #{memoSeq}
	</update>

	<!--기준일 영업일 여부 조회-->
	<select id="seletWorkDay" parameterType="Map" resultType="camelMap">
		/* ComMapper.seletWorkDay*/
		SELECT F_GET_WORK_DAY(#{baseDt}, NVL(#{addDay}, 0)) WORK_DT
          FROM DUAL
	</select>

	<!--기타코드 조회-->
	<select id="selectCodeEtcCd" parameterType="Map" resultType="String">
		/* ComMapper.selectCodeEtcCd*/
		SELECT F_GET_ETC_CD(#{cdType}, #{cd}) ETC_CD FROM DUAL
	</select>

	<!-- 모바일 로그인 조합원 조회 -->
    <select id="selectMembById" parameterType="Map" resultType="camelMap">
    	/* ComMapper.selectMembById */
    	SELECT USER_ID
    		 , USER_PW
    		 , MEMB_NO
		FROM MB_MASTER
		WHERE USER_ID = #{userId}
    </select>


	<!-- #################################### 관리자메인 통계 쿼리 -->
	<!-- 조합원현황 -->
    <select id="selectMainStatMemb" parameterType="Map" resultType="camelMap">
    	/* ComMapper.selectMainStatMemb */
    	SELECT BEF_JOIN_CNT
		     , BEF_LEAVE_CNT
		     , BEF_JOIN_CNT - BEF_LEAVE_CNT BEF_ADD_CNT
		     , NOW_JOIN_CNT
		     , NOW_LEAVE_CNT
		     , NOW_JOIN_CNT - NOW_LEAVE_CNT NOW_ADD_CNT
		     , TOT_JOIN_CNT
		     , TOT_LEAVE_CNT
		     , TOT_JOIN_CNT - TOT_LEAVE_CNT TOT_ADD_CNT
		  FROM
		  (
		    SELECT
		        (SELECT COUNT(*) FROM MB_MASTER WHERE SUBSTR(JOIN_DT, 0, 4) = TO_CHAR(SYSDATE, 'YYYY') - 1) BEF_JOIN_CNT
		        , (SELECT COUNT(*) FROM MB_MASTER WHERE SUBSTR(LEAVE_DT, 0, 4) = TO_CHAR(SYSDATE, 'YYYY') - 1) BEF_LEAVE_CNT
		        , (SELECT COUNT(*) FROM MB_MASTER WHERE SUBSTR(JOIN_DT, 0, 4) = TO_CHAR(SYSDATE, 'YYYY')) NOW_JOIN_CNT
		        , (SELECT COUNT(*) FROM MB_MASTER WHERE SUBSTR(LEAVE_DT, 0, 4) = TO_CHAR(SYSDATE, 'YYYY')) NOW_LEAVE_CNT
		        , (SELECT COUNT(*) FROM MB_MASTER WHERE MEMB_STAT = 10 ) TOT_JOIN_CNT
		        , (SELECT COUNT(*) FROM MB_MASTER WHERE MEMB_STAT = 90 ) TOT_LEAVE_CNT
		      FROM DUAL
		    )
    </select>


    <!-- 당일보증현황 -->
    <select id="selectMainStatGuar" parameterType="Map" resultType="camelMap">
    	/* ComMapper.selectMainStatGuar */
    	SELECT NVL(ETC_CD, '99')
		       , NVL(F_GET_CD_NM('GR01', ETC_CD), '합계') CD_NM
		       , NVL(SUM(CNT), 0) CNT
		       , NVL(SUM(GUAR_AMT), 0) GUAR_AMT
		       , NVL(SUM(COMM_AMT), 0) COMM_AMT
		    FROM
		    (
		      SELECT CD, CD_NM, ETC_CD
		        FROM CM_CODE
		       WHERE CD_TYPE = 'GR01'
		         AND USE_YN = 'Y'
		    ) A
		    , (
		        SELECT GUAR_TYPE
		           , COUNT(*) CNT
		           , SUM(F_GET_GUAR_PRF_AMT(A.GUAR_CLASS_CD, A.GUAR_AMT, A.BEF_GUAR_AMT)) GUAR_AMT
		           , SUM(COMM_AMT) COMM_AMT
		        FROM GR_MASTER A
		       WHERE GUAR_PUB_DT = TO_CHAR(SYSDATE, 'YYYYMMDD')
		         AND GUAR_STAT != '31'
		       GROUP BY GUAR_TYPE
		    ) B
		  WHERE A.CD = B.GUAR_TYPE(+)
		  GROUP BY ROLLUP(ETC_CD)
		  ORDER BY ETC_CD
    </select>

    <!-- 보증실적현황 -->
    <select id="selectMainStatGuarPref" parameterType="Map" resultType="camelMap">
    	/* ComMapper.selectMainStatGuarPref */
    	SELECT TO_CHAR(SYSDATE - 365, 'YYYY') || '년' YEAR
		     , F_GET_PATTERN(SUM(CNT), 'AMT') CNT
		     , F_GET_PATTERN(SUM(GUAR_AMT), 'AMT') GUAR_AMT
		     , F_GET_PATTERN(SUM(COMM_AMT) - SUM(RET_COMM_AMT), 'AMT') COMM_AMT
		  FROM 
		  (
		SELECT COUNT(*) CNT
		       , SUM(F_GET_GUAR_PRF_AMT(A.GUAR_CLASS_CD, A.GUAR_AMT, A.BEF_GUAR_AMT)) GUAR_AMT
		       , SUM(COMM_AMT) COMM_AMT
		       , 0 RET_COMM_AMT
		    FROM GR_MASTER A
		   WHERE GUAR_PUB_DT BETWEEN TO_CHAR(SYSDATE, 'YYYY')-1||'0101' AND TO_CHAR(SYSDATE, 'YYYY')-1||TO_CHAR(SYSDATE, 'MMDD')
		     AND GUAR_STAT != 31
		   UNION ALL
		   SELECT 0
		        , 0
		        , 0
		        , SUM(RET_COMM_AMT) RET_COMM_AMT
		     FROM GR_MASTER
		    WHERE RET_DT BETWEEN TO_CHAR(SYSDATE, 'YYYY') -1||'0101' AND TO_CHAR(SYSDATE, 'YYYY')-1||TO_CHAR(SYSDATE, 'MMDD')
		      AND GUAR_STAT != 31
		    )
		UNION ALL
		SELECT TO_CHAR(SYSDATE, 'YYYY') || '년' YEAR
		     , F_GET_PATTERN(SUM(CNT), 'AMT') CNT
		     , F_GET_PATTERN(SUM(GUAR_AMT), 'AMT') GUAR_AMT
		     , F_GET_PATTERN(SUM(COMM_AMT) - SUM(RET_COMM_AMT), 'AMT') COMM_AMT
		  FROM 
		  (
		SELECT COUNT(*) CNT
		       , SUM(F_GET_GUAR_PRF_AMT(A.GUAR_CLASS_CD, A.GUAR_AMT, A.BEF_GUAR_AMT)) GUAR_AMT
		       , SUM(COMM_AMT) COMM_AMT
		       , 0 RET_COMM_AMT
		    FROM GR_MASTER A
		   WHERE GUAR_PUB_DT BETWEEN TO_CHAR(SYSDATE, 'YYYY')||'0101' AND TO_CHAR(SYSDATE, 'YYYY')||TO_CHAR(SYSDATE, 'MMDD')
		     AND GUAR_STAT != 31
		   UNION ALL
		   SELECT 0
		        , 0
		        , 0
		        , SUM(RET_COMM_AMT) RET_COMM_AMT
		     FROM GR_MASTER
		    WHERE RET_DT BETWEEN TO_CHAR(SYSDATE, 'YYYY')||'0101' AND TO_CHAR(SYSDATE, 'YYYY')||TO_CHAR(SYSDATE, 'MMDD')
		      AND GUAR_STAT != 31
		    )
		UNION ALL
		SELECT '성장률' YEAR
		     , F_GET_PATTERN(ROUND((NOW_CNT - BEF_CNT)/BEF_CNT * 100, 2), 'RATE')|| '%' CNT_PER
		     , F_GET_PATTERN(ROUND((NOW_AMT - BEF_AMT)/BEF_AMT * 100, 2), 'RATE')|| '%' AMT_PER
		     , F_GET_PATTERN(ROUND((NOW_COMM - BEF_COMM)/BEF_COMM * 100, 2), 'RATE')|| '%' COMM_PER
		FROM 
		(
		  SELECT SUM(BEF_CNT) BEF_CNT
		       , SUM(NOW_CNT) NOW_CNT
		       , SUM(BEF_AMT) BEF_AMT
		       , SUM(NOW_AMT) NOW_AMT
		       , SUM(BEF_COMM) - SUM(BEF_RET_COMM) BEF_COMM
		       , SUM(NOW_COMM) - SUM(NOW_RET_COMM) NOW_COMM
		    FROM
		    (
		      SELECT SUM(CASE WHEN SUBSTR(GUAR_PUB_DT, 0, 4) = TO_CHAR(SYSDATE, 'YYYY') - 1 THEN 1 ELSE 0 END) BEF_CNT
		           , SUM(CASE WHEN SUBSTR(GUAR_PUB_DT, 0, 4) = TO_CHAR(SYSDATE, 'YYYY') THEN 1 ELSE 0 END) NOW_CNT
		           , SUM(CASE WHEN SUBSTR(GUAR_PUB_DT, 0, 4) = TO_CHAR(SYSDATE, 'YYYY') - 1 THEN F_GET_GUAR_PRF_AMT(A.GUAR_CLASS_CD, A.GUAR_AMT, A.BEF_GUAR_AMT) ELSE '0' END) BEF_AMT
		           , SUM(CASE WHEN SUBSTR(GUAR_PUB_DT, 0, 4) = TO_CHAR(SYSDATE, 'YYYY') THEN F_GET_GUAR_PRF_AMT(A.GUAR_CLASS_CD, A.GUAR_AMT, A.BEF_GUAR_AMT) ELSE '0' END) NOW_AMT
		           , SUM(CASE WHEN SUBSTR(GUAR_PUB_DT, 0, 4) = TO_CHAR(SYSDATE, 'YYYY') - 1 THEN COMM_AMT ELSE 0 END) BEF_COMM
		           , SUM(CASE WHEN SUBSTR(GUAR_PUB_DT, 0, 4) = TO_CHAR(SYSDATE, 'YYYY') THEN COMM_AMT ELSE 0 END) NOW_COMM
		           , 0 BEF_RET_COMM
		           , 0 NOW_RET_COMM
		        FROM GR_MASTER A
		       WHERE ( GUAR_PUB_DT BETWEEN TO_CHAR(SYSDATE, 'YYYY') - 1||'0101' AND TO_CHAR(SYSDATE, 'YYYY') -1||TO_CHAR(SYSDATE, 'MMDD')
		              OR
		              GUAR_PUB_DT BETWEEN TO_CHAR(SYSDATE, 'YYYY')||'0101' AND TO_CHAR(SYSDATE, 'YYYY')||TO_CHAR(SYSDATE, 'MMDD')
		             )
		         AND GUAR_STAT != 31
		       UNION ALL
		       SELECT 0 BEF_CNT
		            , 0 NOW_CNT
		            , 0 BEF_AMT
		            , 0 NOW_AMT
		            , 0 BEF_COMM
		            , 0 NOW_COMM
		            , SUM(CASE WHEN SUBSTR(RET_DT, 0, 4) = TO_CHAR(SYSDATE, 'YYYY') - 1 THEN RET_COMM_AMT ELSE 0 END) BEF_RET_COMM
		            , SUM(CASE WHEN SUBSTR(RET_DT, 0, 4) = TO_CHAR(SYSDATE, 'YYYY') THEN RET_COMM_AMT ELSE 0 END) NOW_RET_COMM
		         FROM GR_MASTER
		        WHERE ( RET_DT BETWEEN TO_CHAR(SYSDATE, 'YYYY') - 1||'0101' AND TO_CHAR(SYSDATE, 'YYYY') -1||TO_CHAR(SYSDATE, 'MMDD')
		              OR
		              RET_DT BETWEEN TO_CHAR(SYSDATE, 'YYYY')||'0101' AND TO_CHAR(SYSDATE, 'YYYY')||TO_CHAR(SYSDATE, 'MMDD')
		             )
		          AND GUAR_STAT != 31
		    )
		)
    </select>

    <!-- 자본금현황 -->
    <select id="selectMainStatInvtList" parameterType="Map" resultType="camelMap">
    	/* ComMapper.selectMainStatInvtList */
		SELECT A.*, B.*
			, A.NOW_INVEST_AMT   - B. NOW_TAKE_AMT    AS NOW_ADD_INVEST_AMT
			, A.BEF_INVEST_AMT   - B. BEF_TAKE_AMT    AS BEF_ADD_INVEST_AMT
			, A.TOTAL_INVEST_AMT - B. TOTAL_TAKE_AMT  AS TOT_ADD_INVEST_AMT
			, A.TOTAL_INVEST_NUM - B. TOTAL_TAKE_NUM  AS TOT_ADD_INVEST_NUM
		FROM
		(SELECT SUM(NOW_INVEST_NUM)   NOW_INVEST_NUM
				, SUM(NOW_INVEST_AMT) NOW_INVEST_AMT
				, SUM(BEF_INVEST_NUM) BEF_INVEST_NUM
				, SUM(BEF_INVEST_AMT) BEF_INVEST_AMT
				, SUM(TOTAL_INVEST_NUM) TOTAL_INVEST_NUM
				, SUM(TOTAL_INVEST_AMT) TOTAL_INVEST_AMT
			FROM
			(
				SELECT
					 SUM(CASE WHEN SUBSTR(I.INVEST_DT, 0, 4) = TO_CHAR(SYSDATE, 'YYYY') THEN I.INVEST_NUM ELSE 0 END) NOW_INVEST_NUM
					,SUM(CASE WHEN SUBSTR(I.INVEST_DT, 0, 4) = TO_CHAR(SYSDATE, 'YYYY') THEN I.INVEST_AMT ELSE 0 END) NOW_INVEST_AMT
					,SUM(CASE WHEN SUBSTR(I.INVEST_DT, 0, 4) = TO_CHAR(SYSDATE, 'YYYY') - 1 THEN I.INVEST_NUM ELSE 0 END) BEF_INVEST_NUM
					,SUM(CASE WHEN SUBSTR(I.INVEST_DT, 0, 4) = TO_CHAR(SYSDATE, 'YYYY') - 1 THEN I.INVEST_AMT ELSE 0 END) BEF_INVEST_AMT
					,SUM(I.INVEST_NUM) TOTAL_INVEST_NUM
					,SUM(I.INVEST_AMT) TOTAL_INVEST_AMT
				FROM IV_MASTER I
				WHERE INVEST_CD IN (10,11)
				UNION ALL
				SELECT
					 SUM(CASE WHEN SUBSTR(INVEST_DT, 0, 4) = TO_CHAR(SYSDATE, 'YYYY') THEN INVEST_NUM ELSE 0 END) NOW_TRANS_NUM
					,SUM(CASE WHEN SUBSTR(INVEST_DT, 0, 4) = TO_CHAR(SYSDATE, 'YYYY') THEN INVEST_AMT ELSE 0 END) NOW_TRANS_AMT
					,SUM(CASE WHEN SUBSTR(INVEST_DT, 0, 4) = TO_CHAR(SYSDATE, 'YYYY')-1 THEN INVEST_NUM ELSE 0 END) BEF_TRANS_NUM
					,SUM(CASE WHEN SUBSTR(INVEST_DT, 0, 4) = TO_CHAR(SYSDATE, 'YYYY')-1 THEN INVEST_AMT ELSE 0 END) BEF_TRANS_AMT
					,SUM(INVEST_NUM) TOTAL_TRANS_NUM
					,SUM(INVEST_AMT) TOTAL_TRANS_AMT
				FROM IV_MASTER I, IV_TRANS T
				WHERE I.INVEST_NO = T.INVEST_NO
				AND TRANS_MEMB_NO = '0'
				AND TRANS_SEQ = '1'
			)
		)A
		,(
			SELECT
				 SUM(CASE WHEN SUBSTR(INVEST_DT, 0, 4) = TO_CHAR(SYSDATE, 'YYYY') THEN INVEST_NUM ELSE 0 END) NOW_TAKE_NUM
				,SUM(CASE WHEN SUBSTR(INVEST_DT, 0, 4) = TO_CHAR(SYSDATE, 'YYYY') THEN INVEST_AMT ELSE 0 END) NOW_TAKE_AMT
				,SUM(CASE WHEN SUBSTR(INVEST_DT, 0, 4) = TO_CHAR(SYSDATE, 'YYYY')-1 THEN INVEST_NUM ELSE 0 END) BEF_TAKE_NUM
				,SUM(CASE WHEN SUBSTR(INVEST_DT, 0, 4) = TO_CHAR(SYSDATE, 'YYYY')-1 THEN INVEST_AMT ELSE 0 END) BEF_TAKE_AMT
				,SUM(INVEST_NUM) TOTAL_TAKE_NUM
				,SUM(INVEST_AMT) TOTAL_TAKE_AMT
			FROM IV_MASTER I, IV_TRANS T
			WHERE I.INVEST_NO = T.INVEST_NO
			AND TAKE_MEMB_NO = '0'
			AND TRANS_SEQ = '1'
		)B
    </select>

    <!-- 알림톡 수신자 조회 -->
    <select id="selectTalkPersList" parameterType="Map" resultType="camelMap">
    	/* ComMapper.selectTalkPersList */
    	SELECT
		    'CEO' REQ_TYPE
		    , '(대표자)' REQ_TYPE_NM
		    , CEO_SEQ REQ_SEQ
		    , CEO_NM REQ_NM
		    , CEO_CELL_NO REQ_TEL
		    , SMS_YN
		  FROM MB_CEO_VIEW
		 WHERE MEMB_NO = #{membNo}
		 AND SMS_YN = 'Y'
		 AND CEO_STAT = '10'
		UNION ALL
		SELECT
		    'PERSON' REQ_TYPE
		    , '(담당자)' REQ_TYPE_NM
		    , PERS_SEQ REQ_SEQ
		    , PERS_NM REQ_NM
		    , PERS_CELL_NO REQ_TEL
		    , SMS_YN
		  FROM MB_PERSON_VIEW
		 WHERE MEMB_NO = #{membNo}
		   AND SMS_YN = 'Y'
		   AND PERS_STAT = '10'
		 ORDER BY REQ_TYPE, REQ_SEQ

    </select>

</mapper>